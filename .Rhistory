set_caption(caption = paste0('Model 4-', i, ' Regression Results')) %>%
autofit()
results <- c(results, '\n\n\n\n\n',
knit_print(tb))
}
links_df <- map2(links$url, links$category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table()
})
links_df
links_df <- with(links, map2_df(url, category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table() %>%
mutate(Category = .y)
}))
flextable(links_df) %>%
autofit()
links_df <- with(links, map2_df(url, category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table()[, 1:3] %>%
set_names(c('Institution', 'APY', 'Min_Deposit')) %>%
mutate(Category = .y)
}))
links_df <- with(links, map2_df(url, category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table()[[1]][, 1:3] %>%
set_names(c('Institution', 'APY', 'Min_Deposit')) %>%
mutate(Category = .y)
}))
read_html(.x) %>%
html_node('table') %>%
html_table() %>%
.[, 1:3] %>%
set_names(c('Institution', 'APY', 'Min_Deposit')) %>%
mutate(Category = .y)
links_df <- with(links, map2_df(url, category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table() %>%
.[, 1:3] %>%
set_names(c('Institution', 'APY', 'Min_Deposit')) %>%
mutate(Category = .y)
}))
flextable(links_df) %>%
autofit()
links_df <- with(links, map2_df(url, category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table() %>%
.[, 1:3] %>%
set_names(c('Institution', 'APY', 'Min_Deposit')) %>%
mutate(Category = .y)
}))
flextable(links_df) %>%
set_caption(caption = 'Table 1: Initial Dataset') %>%
autofit()
args(footnote)
args(flextable::footnote)
links_df <- with(links, map2_df(url, category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table() %>%
.[, 1:3] %>%
set_names(c('Institution', 'APY', 'Min_Deposit')) %>%
mutate(Category = .y)
}))
flextable(links_df) %>%
set_caption(caption = 'Table 1: Initial Dataset') %>%
footnote(part = 'header',
value = as_paragraph('Source: bankrate.com')) %>%
autofit()
libs <- c('tidyverse', 'magrittr', 'flextable', 'rvest')
for (i in libs) {
if (!require(i, character.only = TRUE)) {
install.packages(i)
library(i, character.only = TRUE)
}
}
links <- data.frame(category = c('1-Year CD Rates', '3-Year CD Rates', '5-Year CD Rates'),
url = c('https://www.bankrate.com/banking/cds/best-1-year-cd-rates/',
'https://www.bankrate.com/banking/cds/best-3-year-cd-rates/',
'https://www.bankrate.com/banking/cds/best-5-year-cd-rates/'),
stringsAsFactors = FALSE)
links_df <- with(links, map2_df(url, category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table() %>%
.[, 1:3] %>%
set_names(c('Institution', 'APY', 'Min_Deposit')) %>%
mutate(Category = .y)
}))
flextable(links_df) %>%
set_caption(caption = 'Table 1: Initial Dataset') %>%
footnote(part = 'header',
value = as_paragraph('Source: bankrate.com')) %>%
autofit()
?footnote
links_df <- with(links, map2_df(url, category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table() %>%
.[, 1:3] %>%
set_names(c('Institution', 'APY', 'Min_Deposit')) %>%
mutate(Category = .y)
}))
flextable(links_df) %>%
set_caption(caption = 'Table 1: Initial Dataset') %>%
footnote(i = 1,
part = 'header',
value = as_paragraph('Source: bankrate.com')) %>%
autofit()
links_df <- with(links, map2_df(url, category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table() %>%
.[, 1:3] %>%
set_names(c('Institution', 'APY', 'Min_Deposit')) %>%
mutate(Category = .y)
}))
flextable(links_df) %>%
set_caption(caption = 'Table 1: Initial Dataset') %>%
footnote(i = 1,
#part = 'header',
value = as_paragraph('Source: bankrate.com')) %>%
autofit()
flextable(links_df) %>%
set_caption(caption = 'Table 1: Initial Dataset') %>%
flexnote::footnote(part = 'header',
value = as_paragraph('Source: bankrate.com')) %>%
autofit()
flextable(links_df) %>%
set_caption(caption = 'Table 1: Initial Dataset') %>%
flextable::footnote(part = 'header',
value = as_paragraph('Source: bankrate.com')) %>%
autofit()
links_df <- with(links, map2_df(url, category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table() %>%
.[, 1:3] %>%
set_names(c('Institution', 'APY', 'Min_Deposit')) %>%
mutate(Category = .y)
}))
links_df %>%
arrange(Category, Institution) %>%
flextable() %>%
set_caption(caption = 'Table 1: Initial Dataset') %>%
flextable::footnote(part = 'header',
value = as_paragraph('Source: bankrate.com')) %>%
autofit()
str(links_df)
links_df[, c('APY', 'Min_Deposit')] %<>%
map_df(~ as.numeric(gsub('%|\$', '', .x)))
links_df[, c('APY', 'Min_Deposit')] %<>%
map_df(~ as.numeric(gsub('%|\\$', '', .x)))
links_df
links_df$Min_Deposit[Min_Deposit == '$20,000 minimum for this APY'] <- 20000
with(links_df,
Min_Deposit[Min_Deposit == '$20,000 minimum for this APY'] <- 20000
links_df[, c('APY', 'Min_Deposit')] %<>%
with(links_df,
Min_Deposit[Min_Deposit == '$20,000 minimum for this APY']) <- 20000
links_df$Min_Deposit[links_df$Min_Deposit == '$20,000 minimum for this APY'] <- 20000
links_df[, c('APY', 'Min_Deposit')] %<>%
map_df(~ as.numeric(gsub('%|\\$|,', '', .x)))
links_df
links_df$Min_Deposit[links_df$Min_Deposit == '$20,000 minimum for this APY'] <- 20000
links_df[, c('APY', 'Min_Deposit')] %<>%
map_df(~ as.numeric(gsub('%|\\$[0-9],', '', .x)))
links_df
libs <- c('tidyverse', 'magrittr', 'flextable', 'rvest')
for (i in libs) {
if (!require(i, character.only = TRUE)) {
install.packages(i)
library(i, character.only = TRUE)
}
}
links <- data.frame(category = c('1-Year CD Rates', '3-Year CD Rates', '5-Year CD Rates'),
url = c('https://www.bankrate.com/banking/cds/best-1-year-cd-rates/',
'https://www.bankrate.com/banking/cds/best-3-year-cd-rates/',
'https://www.bankrate.com/banking/cds/best-5-year-cd-rates/'),
stringsAsFactors = FALSE)
links_df <- with(links, map2_df(url, category, ~ {
read_html(.x) %>%
html_node('table') %>%
html_table() %>%
.[, 1:3] %>%
set_names(c('Institution', 'APY', 'Min_Deposit')) %>%
mutate(Category = .y)
}))
links_df %>%
arrange(Category, Institution) %>%
flextable() %>%
set_caption(caption = 'Table 1: Initial Dataset') %>%
flextable::footnote(part = 'header',
value = as_paragraph('Source: bankrate.com')) %>%
autofit()
links_df$Min_Deposit[links_df$Min_Deposit == '$20,000 minimum for this APY'] <- 20000
links_df[, c('APY', 'Min_Deposit')] %<>%
map_df(~ as.numeric(gsub('%|\\$|,', '', .x)))
links_df
links_df$Min_Deposit[links_df$Min_Deposit == '$20,000 minimum for this APY'] <- 20000
links_df[, c('APY', 'Min_Deposit')] %<>%
map_df(~ as.numeric(gsub('%|\\$|,', '', .x)))
links_df %>%
arrange(Category, Institution) %>%
flextable() %>%
set_caption(caption = 'Table 2: Cleaned Dataset') %>%
flextable::footnote(part = 'header',
value = as_paragraph('Source: bankrate.com')) %>%
autofit()
ggplot(links_df) +
aes(y = APY, x = Min_Deposit, col = Category) +
geom_point() +
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
ggplot(links_df) +
aes(x = APY, y = Min_Deposit, col = Category) +
geom_point() +
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
ggplot(links_df) +
aes(x = APY, y = Min_Deposit, col = Category) +
geom_point() +
labs(x = 'APY',
y = 'Minimum Deposit',
col = '',
title = 'APY vs. Minimum Deposits',
caption = 'Source: bankrate.com') +
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
links_df %>%
filter(Min_Deposit < 10^4) %>%
ggplot() +
aes(x = APY, y = Min_Deposit, col = Category) +
geom_point() +
labs(x = 'APY',
y = 'Minimum Deposit',
col = '',
title = 'APY vs. Minimum Deposits',
caption = 'Source: bankrate.com') +
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
ggplot(links_df) +
aes(x = APY,
y = Min_Deposit,
label = Institution,
col = Category) +
geom_text() +
labs(x = 'APY',
y = 'Minimum Deposit',
col = '',
title = 'APY vs. Minimum Deposits',
caption = 'Source: bankrate.com') +
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
ggplot(links_df) +
aes(x = APY,
y = Min_Deposit,
label = Institution,
col = Category) +
geom_text(position = position_jitter()) +
labs(x = 'APY',
y = 'Minimum Deposit',
col = '',
title = 'APY vs. Minimum Deposits',
caption = 'Source: bankrate.com') +
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
links_df %>%
filter(Min_Deposit < 10^4) %>%
ggplot() +
aes(x = APY,
y = Min_Deposit,
label = Institution,
col = Category) +
geom_text(position = position_jitter()) +
labs(x = 'APY',
y = 'Minimum Deposit',
col = '',
title = 'APY vs. Minimum Deposits',
caption = 'Source: bankrate.com') +
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
libs <- c('tidyverse', 'magrittr', 'flextable',
'rvest', 'plotly')
for (i in libs) {
if (!require(i, character.only = TRUE)) {
install.packages(i)
library(i, character.only = TRUE)
}
}
g1 <- ggplot(links_df) +
aes(x = APY,
y = Min_Deposit,
label = Institution,
col = Category) +
geom_text(position = position_jitter()) +
labs(x = 'APY',
y = 'Minimum Deposit',
col = '',
title = 'APY vs. Minimum Deposits',
caption = 'Source: bankrate.com') +
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
ggplotly(g1)
apy_v_md <- function(data) {
ggplot(data) +
aes(x = APY,
y = Min_Deposit,
label = Institution,
col = Category) +
geom_text(position = position_jitter()) +
labs(x = 'APY',
y = 'Minimum Deposit',
col = '',
title = 'APY vs. Minimum Deposits',
caption = 'Source: bankrate.com') +
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
}
g1 <- apy_v_md(links_df)
ggplotly(g1)
g2 <- links_df %>%
filter(Min_Deposit < 10^4) %>%
apy_v_md()
g2 <- links_df %>%
filter(Min_Deposit < 10^4) %>%
apy_v_md()
ggplotly(g2)
g2 <- links_df %>%
filter(Min_Deposit < 10^4) %>%
apy_v_md(title = 'APY vs. Minimum Deposits (Outliers Removed)')
apy_v_md <- function(data, title) {
ggplot(data) +
aes(x = APY,
y = Min_Deposit,
label = Institution,
col = Category) +
geom_text(position = position_jitter()) +
labs(x = 'APY',
y = 'Minimum Deposit',
col = '',
title = title,
caption = 'Source: bankrate.com') +
theme_light() +
theme(panel.grid.minor   = element_blank(),
panel.grid.major.x = element_blank())
}
g1 <- apy_v_md(links_df, title = 'APY vs. Minimum Deposits')
ggplotly(g1)
g2 <- links_df %>%
filter(Min_Deposit < 10^4) %>%
apy_v_md(title = 'APY vs. Minimum Deposits (Outliers Removed)')
ggplotly(g2)
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown::install_theme('nathancday/min_night')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
JuliaCall::julia_exists()
blogdown:::new_post_addin()
library(diagnoser)
# OLS case
model.lm <- lm(data = mtcars, formula = mpg ~ wt + gear)
diagnose(model.lm,
fit_type      = 'response',
residual_type = 'response')
ggdiagnose(model.lm,
fit_type      = 'response',
residual_type = 'response',
freqpct       = TRUE,
alpha         = 0.5)
model.lm <- lm(data = mtcars, formula = mpg ~ wt + gear)
diagnose(model.lm,
fit_type      = 'response',
residual_type = 'response')
blogdown:::serve_site()
with(mtcars, plot(wt ~ mpg, pch = 1, type = 'n',
xlab = 'MPG',
ylab = 'Weight',
main = 'Weight vs. MPG'))
# Plot the labels on the graph.
with(mtcars, text(mpg, wt, row.names(mtcars),
pos = 3, cex=0.0, col = 'cyan4'))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
library(knitr)
library(kableExtra)
# Summary Table
summ <- function(data, caption) {
summ_dat <- kable(data,
booktabs = TRUE,
caption  = caption,
linesep  = '') %>%
kable_styling(full_width    = TRUE,
latex_options = "hold_position") %>%
row_spec(1:(NROW(data)-1),
hline_after = TRUE)
summ_dat
}
```{r}
summ_strings <- data.frame(Function = c('paste(x, y)/paste0(x, y)',
"strsplit(x, split = ' ')",
'gsub(pattern, replacement, x)',
'grep/grepl(pattern, vector)'),
Description = c('Concatenation of x and y.',
'Split a string by a splitting character.',
'Substitute a portion of a string vector based on a given pattern.',
'Pattern match a string and output its position OR Boolean (i.e. TRUE/FALSE).'),
Example = c("paste('a', 'b'); paste0('a', 'b')",
"x <- c('This is a sentence.',
'This is another sentence.',
'This is yet another sentence.')
\n strsplit(x, split = ' ')",
"gsub('sentence', 'drink', x)",
"grep('^M', rownames(mtcars), value = TRUE)"))
summ(summ_strings, 'Summary of String Functions')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
funs <- data.frame(Function = c('lapply(X, FUN)',
'sapply(X, FUN)',
'apply(X, MARGIN, FUN)',
'vapply(X, FUN, FUN.VALUE)',
'mapply(FUN, ...)',
'Map(f, ...)',
'rapply(object, f, classes)',
'aggregate(formula, data, FUN)'),
Description = c('Compute a function over data and output a list.',
'Compute a function over data and output a matrix (sometimes a list, depending on the function being passed).',
'Compute a function row-wise or column-wise.',
'Compute a function over data and check if the output matches a pre-specified type.',
'Compute a function over one or more data inputs and output an array (vector or matrix).',
'Compute a function over one or more data inputs and output a list.',
'Recursively compute a function over data and output a vector or list.',
'Generate grouped computations and output a data frame.'),
Example     = c('lapply(mtcars, mean)',
'sapply(mtcars, mean)',
'apply(mtcars, 1, mean); apply(mtcars, 2, mean)',
'vapply(mtcars, mean, numeric(1))',
'mapply(rbind, mtcars\\$mpg, mtcars\\$wt)',
'Map(rbind, mtcars\\$mpg, mtcars\\$wt)',
'rapply(iris, mean, classes = "numeric")',
'aggregate(mpg ~ gear, mtcars, mean)'))
#summ_funs <- summ(funs, caption = 'Summary of Functionals')
summ_funs <- flextable(funs) %>%
set_caption(caption = 'Summary of Functionals')
library(knitr)
library(kableExtra)
library(flextable)
# Summary Table
summ <- function(data, caption) {
summ_dat <- kable(data,
booktabs = TRUE,
caption  = caption,
linesep  = '') %>%
kable_styling(full_width    = TRUE,
latex_options = "hold_position") %>%
row_spec(1:(NROW(data)-1),
hline_after = TRUE)
summ_dat
}
funs <- data.frame(Function = c('lapply(X, FUN)',
'sapply(X, FUN)',
'apply(X, MARGIN, FUN)',
'vapply(X, FUN, FUN.VALUE)',
'mapply(FUN, ...)',
'Map(f, ...)',
'rapply(object, f, classes)',
'aggregate(formula, data, FUN)'),
Description = c('Compute a function over data and output a list.',
'Compute a function over data and output a matrix (sometimes a list, depending on the function being passed).',
'Compute a function row-wise or column-wise.',
'Compute a function over data and check if the output matches a pre-specified type.',
'Compute a function over one or more data inputs and output an array (vector or matrix).',
'Compute a function over one or more data inputs and output a list.',
'Recursively compute a function over data and output a vector or list.',
'Generate grouped computations and output a data frame.'),
Example     = c('lapply(mtcars, mean)',
'sapply(mtcars, mean)',
'apply(mtcars, 1, mean); apply(mtcars, 2, mean)',
'vapply(mtcars, mean, numeric(1))',
'mapply(rbind, mtcars\\$mpg, mtcars\\$wt)',
'Map(rbind, mtcars\\$mpg, mtcars\\$wt)',
'rapply(iris, mean, classes = "numeric")',
'aggregate(mpg ~ gear, mtcars, mean)'))
#summ_funs <- summ(funs, caption = 'Summary of Functionals')
summ_funs <- flextable(funs) %>%
set_caption(caption = 'Summary of Functionals')
summ_funs
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
